run-name: Project automate

on:
  issues:
    types:
      ["opened", "reopened", "labeled", "unlabeled", "assigned", "unassigned"]

  pull_request:
    types: ["opened", "reopened", "labeled", "unlabeled"]

jobs:
  fetch-details:
    runs-on: ubuntu-latest
    outputs: 
      ids: ${{ steps.get-required-ids.outputs.ids }}
      PRJ: ${{ steps.fetch-prj-details.outputs.PRJ }}
    steps:
      - name: Get reuired IDs
        id: get-required-ids
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}
          script: |
            // Fetch data for github project
            const resp = await github.graphql(`query getOrgProjRepoId {
              repository(owner:"${{ github.repository_owner }}", name:"${{ github.event.repository.name }}") {
                id
              },
              organization(login:"${{ github.repository_owner }}") {
                id
                projectsV2(first: 10) {
                  nodes {
                    number,
                    title,
                    id
                  }
                }
              }
            }`)
            
            // Find project number and id from project name
            const prj = resp.organization.projectsV2.nodes.filter((node) => node.title == "${{ vars.MAIN_PRJ }}")
            if( prj.length == 0 ) {
              console.log("No projects found with name: ${{ vars.MAIN_PRJ }}")
              return false
            } 
            
            const IDs = {
              'REPO_ID': resp.repository.id,
              'PRJ_ID': prj[0].id,
              'PRJ_NUM': prj[0].number,
              'ORG_ID': resp.organization.id,
            }
            core.setOutput('REPO_ID', resp.repository.id)
            core.setOutput('PRJ_ID', prj[0].id)
            core.setOutput('PRJ_NUM', prj[0].number)
            core.setOutput('ORG_ID', resp.organization.id)
            core.setOutput('ids', JSON.stringify(IDs))
      
      - name: Fetch project details
        id: fetch-prj-details
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}
          script: |
            const getPrjFields = await github.graphql(`query getPrjFields {
              node(id:"${{ steps.get-required-ids.outputs.PRJ_ID }}") {
                ... on ProjectV2 {
                  id
                  fields(first: 20) {
                    totalCount
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                      ... on ProjectV2IterationField {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }`)
            console.log(JSON.stringify(getPrjFields))
            core.setOutput('PRJ', JSON.stringify(getPrjFields.node))

  issue-automation:
    if: github.event_name == 'issues'
    name: Issue automation- ${{ github.event.issue.number }}
    needs: fetch-details
    runs-on: ubuntu-latest

    steps:
      - name: Get Issue details
        id: issue-details
        uses: actions/github-script@v7
        with: 
          github-token: ${{ secrets.ACCESS_TOKEN }}
          script: |
            // Fetch data for github project
            const vars = ${{ needs.fetch-details.outputs.ids }}
            const resp = await github.graphql(`query getIssueId($REPO_ID: ID!) {
              node(id:$REPO_ID) {
                ... on Repository {
                  id
                  issue(number: ${{ github.event.issue.number }}) {
                    id
                    projectItems(first: 10) {
                      totalCount
                    }
                  }
                }
              }
            }`, vars)
            core.setOutput('ISSUE_ID', resp.node.issue.id)
            core.setOutput('PRJ_CNT', resp.node.issue.projectItems.totalCount)
            console.log(resp.node.issue.projectItems.totalCount)
            
      - name: Opened/ Reopned
        id: opened-reopned
        if: github.event.action == 'opened' || github.event.action == 'reopened'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}
          script: |
            const totalCount = ${{ steps.issue-details.outputs.PRJ_CNT }}
            const vars = ${{ needs.fetch-details.outputs.ids }}

            if( totalCount == 0 ) {
              //Add issue to project
              const AddIssueToProjectResp = await github.graphql(`mutation AddIssueToProject($ORG_ID: String!, $PRJ_ID: ID!) {
                addProjectV2ItemById( input: {
                  clientMutationId:$ORG_ID
                  contentId:"${{ steps.issue-details.outputs.ISSUE_ID }}"
                  projectId:$PRJ_ID
                  }) {
                  clientMutationId
                  item {
                    id
                  }
                }
              }`, vars)

              if( AddIssueToProjectResp.addProjectV2ItemById.clientMutationId == vars.ORG_ID ) {
                console.log("Issue got added to project: ${{ vars.MAIN_PRJ }}")
                return true
              }
              else {
                console.log("Error while adding Issue: ${{ github.event.issue.number }} to project: ${{ vars.MAIN_PRJ }}")
                return false
              }
            }
            console.log("Issue already associate with github project.");
            return false

      - name: Find ITEM
        id: find-item
        if: github.event.action != 'opened' && github.event.action != 'reopened'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}
          script: |
            const totalCount = ${{ steps.issue-details.outputs.PRJ_CNT }}
            if( totalCount == 0 ) {
              console.log("Issue not associate with any github project.");
              return false
            }
            const vars = ${{ needs.fetch-details.outputs.ids }}
            var isFound = false
            var isOver = false
            vars.cursor = ""
            var itemNodes = []

            while(isFound == false && isOver == false) {
              const getItemIdResp = await github.graphql(`query getItemID($PRJ_ID: ID!, $cursor: String!) {
                node(id:$PRJ_ID) {
                  ... on ProjectV2 {
                    id
                    items(first: 10, after:$cursor, orderBy: {
                      field:POSITION,
                      direction:DESC
                    }) {
                      nodes {
                        id
                        fieldValueByName(name:"Status") {
                          ... on ProjectV2ItemFieldSingleSelectValue {
                            id
                            name
                          }
                        }
                        content {
                          __typename
                          ... on Issue {
                            number
                            title
                          }
                        }
                      }
                      pageInfo {
                        endCursor
                        hasNextPage
                      }
                    }
                  }
                }
              }`, vars)

              itemNodes = getItemIdResp.node.items.nodes.filter((node) => node.content.__typename === 'Issue' && node.content.number === ${{ github.event.issue.number }})

              if( itemNodes.length > 0 ) {
                isFound = true
                break
              }
              
              if( getItemIdResp.node.items.pageInfo.hasNextPage ) {
                vars.cursor = getItemIdResp.node.items.pageInfo.endCursor
              }
              else {
                isOver = true
                break;
              }
            }

            if( isFound == true) {
              core.setOutput('ITEM_ID', itemNodes[0].id)
              core.setOutput('ITEM', JSON.stringify(itemNodes[0]))
              return true
            }
            console.log("Issue: ${{ github.event.issue.number }} is not associated with GitHub project: ${{ vars.MAIN_PRJ }}")
            return false

      - name: Find target Status
        id: find-target-status
        if: github.event.action != 'opened' && github.event.action != 'reopened'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}
          script: |
            const item = ${{ steps.find-item.outputs.ITEM }}

            const labels = ${{ toJSON(github.event.issue.labels.*.name) }}
            const assignees = ${{ toJSON(github.event.issue.assignees) }}
            
            var targetOptionVal = ""
            if( labels.includes('epic') ) {
              targetOptionVal = ":file_cabinet: Epic"
            }
            else if( assignees.length > 0 ) { 
              targetOptionVal = "ðŸ”– Sprint Backlog"
            }
            else if( "${{ github.event.action }}" == 'labeled' ) {
              if( "${{ github.event.label.name }}" == 'epic' ) {
                targetOptionVal = ":file_cabinet: Epic"
              }
              else if( "${{ github.event.label.name }}" == 'accepted' ) {
                targetOptionVal = "ðŸ“‹ Product Backlog"
              }
            }
            else if( "${{ github.event.action }}" == 'unlabeled' ) {
              if( "${{ github.event.label.name }}" == "accepted" ) {
                targetOptionVal = "ðŸ†• New"
              }
              else {
                targetOptionVal = "ðŸ“‹ Product Backlog"
              }
            }
            else if( "${{ github.event.action }}" == 'assigned' ) {
              targetOptionVal = "ðŸ”– Sprint Backlog"
            }
            else if( "${{ github.event.action }}" == 'unassigned' ) {
              if( labels.includes("accepted") ) {
                targetOptionVal = "ðŸ“‹ Product Backlog"
              }
              else {
                targetOptionVal = "ðŸ†• New"
              }
            }
            else {
              console.log("No valid target value found for Event: ${{ github.event.action}}")
              return
            } 
            if( targetOptionVal == item.fieldValueByName.name ) {
              console.log("Target Status value and current status values are same: " + targetOptionVal)
              return
            }

            const prj = ${{ needs.fetch-details.outputs.PRJ }}
            const fieldNode = prj.fields.nodes.filter((node) => node.name.toUpperCase() == 'status'.toUpperCase())
            const optionNode = fieldNode[0].options.filter((option) => option.name == targetOptionVal )

            core.setOutput("OPTION_NODE", JSON.stringify(optionNode))
            core.setOutput("FIELD_ID", fieldNode[0].id)
            core.setOutput("UPDATE_STATUS", "true")

      - name: Update Status
        id: update-status
        if: steps.find-target-status.outputs.UPDATE_STATUS == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}
          script: |
            const optionNode = ${{ toJSON(steps.find-target-status.outputs.OPTION_NODE) }}

            const vars = ${{ needs.fetch-details.outputs.ids }}
            vars["FIELD_ID"] = ${{ steps.find-target-status.outputs.FIELD_ID }}
            vars["OPTION_ID"] = optionNode[0].id

            const UpdateIssueStatusResp = await github.graphql(`mutation UpdateIssueStatus($ORG_ID: String!, $PRJ_ID: ID!, $FIELD_ID: ID!, $OPTION_ID: String!) {
              updateProjectV2ItemFieldValue( input: {
                clientMutationId:$ORG_ID
                projectId:$PRJ_ID
                itemId:"${{ steps.get-item-id.outputs.ITEM_ID }}"
                fieldId:$FIELD_ID
                value: {
                  singleSelectOptionId: $OPTION_ID
                }
              }) {
                clientMutationId
                projectV2Item {
                  id
                }
              }
            }`, vars)

            if( UpdateIssueStatusResp.updateProjectV2ItemFieldValue.clientMutationId == vars.ORG_ID ) {
              console.log("Issue Status changed to: " + optionNode[0].name)
              return true
            }
            else {
              console.log("Error while changing Issue: ${{ github.event.issue.number }} status to: " + optionNode[0].name)
              return false
            }

      - name: Print context 1
        if: always()
        uses: actions/github-script@v7
        with:
          script: console.log(${{ toJson(steps) }})

      - name: Print context 2
        if: always()
        uses: actions/github-script@v7
        with:
          script: console.log(${{ toJson(github) }})

  pr-automation:
    if: github.event_name == 'pull_request'
    needs: fetch-details
    runs-on: ubuntu-latest

    steps:
      - run: echo "Pull request automation"
#      - name: Checkout repository
#      - name: Get required ids
#      - name: Handle new Pull Request
#      - name: Labeled Pull Request - ${{ github.event.issue.numer }}
#      - name: Unlabeled Pull Request - ${{ github.event.issue.numer }}
#      - name: Assigned Pull Request - ${{ github.event.issue.number }}
#      - name: Unassigned Pull Request - ${{ github.event.issue.number }}
