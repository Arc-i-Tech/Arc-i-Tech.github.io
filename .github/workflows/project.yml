run-name: Project automate

on:
  issues:
    types:
      ["opened", "reopened", "labeled", "unlabeled", "assigned", "unassigned"]

  pull_request:
    types: ["opened", "reopened", "labeled", "unlabeled"]

jobs:
  fetch-details:
    runs-on: ubuntu-latest
    outputs: 
      ids: ${{ steps.get-required-ids.outputs.ids }}
      PRJ: ${{ steps.fetch-prj-details.outputs.PRJ }}
    steps:
      - name: Get reuired IDs
        id: get-required-ids
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}
          script: |
            // Fetch data for github project
            const resp = await github.graphql(`query getOrgProjRepoId {
              repository(owner:"${{ github.repository_owner }}", name:"${{ github.event.repository.name }}") {
                id
              },
              organization(login:"${{ github.repository_owner }}") {
                id
                projectsV2(first: 10) {
                  nodes {
                    number,
                    title,
                    id
                  }
                }
              }
            }`)
            
            // Find project number and id from project name
            const prj = resp.organization.projectsV2.nodes.filter((node) => node.title === "${{ vars.MAIN_PRJ }}")
            if( prj.length === 0 ) {
              console.log("No projects found with name: ${{ vars.MAIN_PRJ }}")
              return false
            } 
            
            const IDs = {
              'REPO_ID': resp.repository.id,
              'PRJ_ID': prj[0].id,
              'PRJ_NUM': prj[0].number,
              'ORG_ID': resp.organization.id,
            }
            core.setOutput('REPO_ID', resp.repository.id)
            core.setOutput('PRJ_ID', prj[0].id)
            core.setOutput('PRJ_NUM', prj[0].number)
            core.setOutput('ORG_ID', resp.organization.id)
            core.setOutput('ids', JSON.stringify(IDs))
      
      - name: Fetch project details
        id: fetch-prj-details
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}
          script: |
            const getPrjFields = await github.graphql(`query getPrjFields {
              node(id:"${{ steps.get-required-ids.outputs.PRJ_ID }}") {
                ... on ProjectV2 {
                  id
                  fields(first: 20) {
                    totalCount
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                      ... on ProjectV2IterationField {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }`)
            console.log(JSON.stringify(getPrjFields))
            core.setOutput('PRJ', JSON.stringify(getPrjFields.node))

      - name: Print outputs
        id: print-outputs
        uses: actions/github-script@v7
        with:
          script: |
            console.log("Steps: ")
            console.log(${{ toJSON(steps) }})
            console.log("Job: ")
            console.log(${{ toJSON(job) }})

  issue-automation:
    needs: fetch-details
    if: ${{ github.event_name }} == 'issues'
    runs-on: ubuntu-latest

    steps:
      - name: Get Issue details
        id: issue-details
        uses: actions/github-script@v7
        with: 
          script: |
            // Fetch data for github project
            const vars = ${{ needs.fetch-details.outputs.ids }}
            const resp = await github.graphql(`query getIssueId($REPO_ID: ID!) {
              node(id:$REPO_ID) {
                ... on Repository {
                  id
                  issue(number: ${{ github.event.issue.number }}) {
                    id
                    projectItems(first: 10) {
                      totalCount
                    }
                  }
                }
              }
            }`, vars)
            
            core.setOutput('ISSUE_ID', resp.node.issue.id)
            core.setOutput('PRJ_CNT', resp.node.issue.projectItems.totalCount)
            
      - name: Opened/ Reopned
        id: opened-reopned
        if: ${{ github.action.action }} === 'opned' || ${{ github.action.action }} === 'reopned'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}
          script: |
            const totalCount = ${{ steps.issue-details.outputs.PRJ_CNT }}
            const vars = ${{ needs.fetch-details.outputs.ids }}

            if( totalCount === 0 ) {
              console.log("Issue is not added to any github projects.");
              //Add issue to project
              const AddIssueToProjectResp = await github.graphql(`mutation AddIssueToProject($ORG_ID: String!, $PRJ_ID: ID!) {
                addProjectV2ItemById( input: {
                  clientMutationId:$ORG_ID
                  contentId:"${{ steps.issue-details.outputs.ISSUE_ID }}"
                  projectId:$PRJ_ID
                  }) {
                  clientMutationId
                  item {
                    id
                  }
                }
              }`, vars)

              if( AddIssueToProjectResp.clientMutationId === vars.ORG_ID ) {
                console.log("Issue got added to project: ${{ vars.MAIN_PRJ }}")
                return true
              }
              else {
                console.log("Error while adding Issue: ${{ github.event.issue.number }} to project: ${{ vars.MAIN_PRJ }}")
                return false
              }
            }
            console.log("Issue already has associate github projects with it.");
            return false

      - name: Labeled
        id: labeled
        if: ${{ github.action.action }} === 'labeled'
        uses: actions/github-script@v7
        with: 
          script: |

      - name: Unlabeled
        id: unlabeled
        if: ${{ github.action.action }} === 'unlableled'
        uses: actions/github-script@v7
        with: 
          script: |

      - name: Assigned
        id: assigned
        if: ${{ github.action.action }} === 'assigned'
        uses: actions/github-script@v7
        with:
          script: |
            // Check assigned event
            if( ${{ steps.issue-details.outputs.PRJ_CNT }} === 0 ) {
              console.log("Issue is not added to any github projects.");
              console.log("Unable to move issue to 'In progress' column");
              return false
            }

            // Variables
            const variables = {
              "cursor": ""
            }
            const isFound = false
            const isOver = false
            variables.cusrsor = ""
            const issue = null

            while(!isFound || !isOver) {
              const getItemIdResp = await github.graphql(`query getItemID($cursor: String!) {
                node(id:${{ steps.get-required-ids.outputs.PRJ_ID }}) {
                  ... on ProjectV2 {
                    id
                    fields(first:20) {
                      nodes {
                      __typename
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                    items(first: 10, after:$cursor) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            number
                            title
                        }
                      }
                    }
                    pageInfo {
                      endCursor
                      hasNextPage
                    }
                  }
                }
              }`, variables)

              issue = getItemIdResp.node.items.nodes.filter((node) => node.content.__typename === 'Issue' && node.content.number === ${{ github.event.issue.number }})
              if( issue.length > 0 ) {
                isFound = true
                const updateIssueStatusResp = await github.graphql(`mutation UpdateIssueStatus($orgId: String!, $itemId: ID!, $prjId: ID!, $fieldId: String!, ) {
                  updateProjectV2ItemFieldValue( input: {
                    clientMutationId: $orgId
                    projectId: $prjId
                    itemId:$itemId
                    fieldId:"PVTSSF_lADOBDuDa84AHalLzgERFX0"
                      value: {
                        singleSelectOptionId: "f9c7693d"
                      }
                  }) {
                    clientMutationId
                    projectV2Item {
                      id
                    }
                  }
                }`)
                if( updateIssueStatusResp.clientMutationId ===  )
                break;
              }
              if( getItemIdResp.node.items.pageInfo.hasNextPage ) {
                variables.cursor = getItemIdResp.node.items.pageInfo.endCursor
              }
              else {
                isOver = true
                break;
              }
            }

      - name: Unassigned
        id: unassigned
        if: ${{ github.action.action }} === 'unassigned'
        uses: actions/github-script@v7
        with: 
          script: |

      - name: Print context 1
        if: always()
        uses: actions/github-script@v7
        with:
          script: console.log(${{ toJson(needs.fetch-details.outputs.PRJ) }})
            console.log(${{ needs.fetch-details.outputs.ids.REPO_ID }})

      - name: Print context 2
        if: always()
        uses: actions/github-script@v7
        with:
          script: console.log(${{ toJson(needs.fetch-details) }})

  pr-automation:
    needs: fetch-details
    runs-on: ubuntu-latest

    steps:
      - run: echo "Pull request automation"
#      - name: Checkout repository
#      - name: Get required ids
#      - name: Handle new Pull Request
#      - name: Labeled Pull Request - ${{ github.event.issue.numer }}
#      - name: Unlabeled Pull Request - ${{ github.event.issue.numer }}
#      - name: Assigned Pull Request - ${{ github.event.issue.number }}
#      - name: Unassigned Pull Request - ${{ github.event.issue.number }}
