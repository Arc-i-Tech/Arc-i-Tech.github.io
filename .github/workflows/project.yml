run-name: Project automate

on:
  issues: 
    types: ['opened', 'reopened', 'labeled', 'unlabeled']
  
  pull_request: 
    types: ['opened', 'reopened', 'labeled', 'unlabeled']

jobs:
  add-to-project:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        id: checkout-repo
        uses: actions/checkout@v4

      - name: Get reuired ids
        id: get-required-ids
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}
          script: |
            // Fetch data for github project
            const resp = await github.graphql(`query getOrgProjRepoId {
              repository(owner:"${{ github.repository_owner }}", name:"${{ github.event.repository.name }}") {
                id
              },
              organization(login:"${{ github.repository_owner }}") {
                id
                projectsV2(first: 10) {
                  nodes {
                    number,
                    title,
                    id
                  }
                }
              }
            }`)
            
            // Find project number and id from project name
            const prj = resp.organization.projectsV2.nodes.filter((node) => node.title === "${{ vars.MAIN_PRJ }}")
            if( prj.length === 0 ) {
              console.log("No projects found with name: ${{ vars.MAIN_PRJ }}")
              return false
            } 

            core.setOutput('REPO_ID', resp.repository.id)
            core.setOutput('PRJ_ID', prj[0].id)
            core.setOutput('ORG_ID', resp.organization.id)

      - name: Handle Issue - ${{ github.event.issue.number }}
        id: handle-issue
        if: ${{ github.event_name }} == 'issues'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}
          script: |
            // Fetch data for github project
            const resp = await github.graphql(`query getIssueId{
              node(id:"${{ steps.get-required-ids.outputs.REPO_ID }}") {
                id
                issue(number: ${{ github.event.issue.number }}) {
                  id
                  projectItems(first: 10) {
                    totalCount
                  }
                }
              }`)
            const totalCount = resp.node.issue.projectItems.totalCount
            if( totalCount > 0 ) {
              console.log("Issue is alredy added to one of the github projects.");
              return
            }

            // Issue is not added to any of the github projects and hence continues

            // Find project number and url from project name
            const prj = resp.organization.projectsV2.nodes.filter((node) => node.title === "${{ vars.MAIN_PRJ }}")
            if( prj.length === 0 ) {
              console.log("No projects found with name: ${{ vars.MAIN_PRJ }}")
              return
            }

            //Add issue to project
            const variables = {
              "orgId": resp.organization.id,
              "issueId": resp.repository.issue.id,
              "prjId": prj[0].id
            }
            const res = await github.graphql(`mutation AddIssueToProject($orgId: String!, $issueId: ID!, $prjId: ID!) {
              addProjectV2ItemById( input: {
                clientMutationId:$orgId
                contentId:$issueId
                projectId:$prjId
                }) {
                clientMutationId
                item {
                    id
                }
              }
            }`, variables)
            if( res.addProjectV2ItemById.clientMutationId === resp.organization.id) {
              console.log("Issue added to project successfully.")
            }
            else {
              console.log("Failed to add issue to project ${{ vars.MAIN_PRJ }}")
              console.log(JSON.stringify(res))
              return false
            }
            console.log(prj)
            core.setOutput('REPO_ID', resp.repository.id)
            core.setOutput('PRJ_ID', prj[0].id)
            core.setOutput('ORG_ID', resp.organization.id)
            core.setOutput('ISSUE_ID', issueId)
            console.log("Step output updated successfully")


      - name: Print context
        if: always()
        run: echo ${{ job.status }}
