run-name: Project automate

on:
  issues: 
    types: ['opened', 'reopened', 'labeled', 'unlabeled', 'assigned', 'unassigned']
  
  pull_request: 
    types: ['opened', 'reopened', 'labeled', 'unlabeled']

jobs:
  add-to-project:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        id: checkout-repo
        uses: actions/checkout@v4

      - name: Get reuired ids
        id: get-required-ids
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}
          script: |
            // Fetch data for github project
            const resp = await github.graphql(`query getOrgProjRepoId {
              repository(owner:"${{ github.repository_owner }}", name:"${{ github.event.repository.name }}") {
                id
              },
              organization(login:"${{ github.repository_owner }}") {
                id
                projectsV2(first: 10) {
                  nodes {
                    number,
                    title,
                    id
                  }
                }
              }
            }`)
            
            // Find project number and id from project name
            const prj = resp.organization.projectsV2.nodes.filter((node) => node.title === "${{ vars.MAIN_PRJ }}")
            if( prj.length === 0 ) {
              console.log("No projects found with name: ${{ vars.MAIN_PRJ }}")
              return false
            } 

            core.setOutput('REPO_ID', resp.repository.id)
            core.setOutput('PRJ_ID', prj[0].id)
            core.setOutput('PRJ_NUM', prj[0].number)
            core.setOutput('ORG_ID', resp.organization.id)

      - name: Handle Issue - ${{ github.event.issue.number }}
        id: handle-issue
        if: ${{ github.event_name }} == 'issues'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}
          script: |
            // Fetch data for github project
            const resp = await github.graphql(`query getIssueId{
              node(id:"${{ steps.get-required-ids.outputs.REPO_ID }}") {
                id
                issue(number: ${{ github.event.issue.number }}) {
                  id
                  projectItems(first: 10) {
                    totalCount
                  }
                }
              }`)
            const totalCount = resp.node.issue.projectItems.totalCount

            // Variables
            const variables = {
              "orgId": ${{ steps.get-required-ids.outputs.ORG_ID }},
              "issueId": resp.node.issue.id,
              "prjId": ${{ steps.get-required-ids.outputs.PRJ_ID }}
            }

            if( ( ${{ github.action.action }} === 'opned' || ${{ github.action.action }} === 'reopned' ) && totalCount === 0 ) {
              console.log("Issue is not added to any github projects.");
              //Add issue to project
              const AddIssueToProjectResp = await github.graphql(`mutation AddIssueToProject($orgId: String!, $issueId: ID!, $prjId: ID!) {
                addProjectV2ItemById( input: {
                  clientMutationId:$orgId
                  contentId:$issueId
                  projectId:$prjId
                  }) {
                  clientMutationId
                  item {
                    id
                  }
                }
              }`, variables)

              if( AddIssueToProjectResp.clientMutationId === variables.orgId ) {
                console.log("Issue got added to project: ${{ vars.MAIN_PRJ }}")
                return true
              }
              else {
                console.log("Error while adding Issue: ${{ github.event.issue.number }} to project: ${{ vars.MAIN_PRJ }}")
                return false
              }
            }

            // Check assigned event
            if( ${{ github.action.action }} === 'assigned' || ${{ github.action.action }} === 'unassigned' ) {
              if( totalCount === 0 ) {
                console.log("Issue is not added to any github projects.");
                console.log("Unable to move issue to 'In progress' column");
                return false
              }

              const isFound = false
              const isOver = false
              variables.cusrsor = ""
              const issue = null

              while(!isFound || !isOver) {
                const getItemIdResp = await github.graphql(`query getItemID($prjId: ID!, $cursor: String!) {
                  node(id:$prjId) {
                    ... on ProjectV2 {
                      id
                      fields(first:20) {
                        nodes {
                        __typename
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                      items(first: 10, after:$cursor) {
                        nodes {
                          id
                          content {
                            ... on Issue {
                              number
                              title
                          }
                        }
                      }
                      pageInfo {
                        endCursor
                        hasNextPage
                      }
                    }
                  }
                }`, variables)

                issue = getItemIdResp.node.items.nodes.filter((node) => node.content.__typename === 'Issue' && node.content.number === ${{ github.event.issue.number }})
                if( issue.length > 0 ) {
                  isFound = true
                  const updateIssueStatusResp = await github.graphql(`mutation UpdateIssueStatus($orgId: String!, $itemId: ID!, $prjId: ID!, $fieldId: String!, ) {
                    updateProjectV2ItemFieldValue( input: {
                      clientMutationId: $orgId
                        projectId: $prjId
                        itemId:$itemId
                        fieldId:"PVTSSF_lADOBDuDa84AHalLzgERFX0"
                        value: {
                            singleSelectOptionId: "f9c7693d"
                        }
                      }) {
                      clientMutationId
                      projectV2Item {
                        id
                      }
                    }
                  }`)
                  break;
                }
                if( getItemIdResp.node.items.pageInfo.hasNextPage ) {
                  variables.cursor = getItemIdResp.node.items.pageInfo.endCursor
                }
                else {
                  isOver = true
                  break;
                }
              }

            }

      - name: Print context
        if: always()
        run: echo ${{ job.status }}
